# -*- coding: utf-8 -*-
"""Ass3_9676.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RROJa39eQvgbE4j5zTkdFJyjCFwoR9c-

Question 1: PythonArray1_9676
"""

# first_last6
def first_last6(nums):
   return nums[0] == 6 or nums[-1] == 6

# same_first_last
def same_first_last(nums):
  return len(nums) >= 1 and nums[0] == nums[-1]

# make_pi
def make_pi():
  return [3, 1, 4]

# common_end
def common_end(a, b):
    return a[0] == b[0] or a[-1] == b[-1]

# sum3
def sum3(nums):
  return sum(nums)

"""Question 2: Hail stone sequence problem"""

def hailstone_sequence():
    num = int(input("Enter a positive integer: "))

    if num <= 1:
        print("Please enter a number greater than 1.")
        return

    counter = 0

    while num != 1:
        if num % 2 == 0:
            print(f"{num} is even, so I take half: {num // 2}")
            num = num // 2
        else:
            print(f"{num} is odd, so I make 3n+1: {3 * num + 1}")
            num = 3 * num + 1

        counter += 1

    print(f"The process took {counter} steps to reach 1.")

hailstone_sequence()

"""Bonus Question 3: PythonArray2_9676"""

# rotate_left3
def rotate_left3(nums):
  return [nums[1], nums[2], nums[0]]

# reverse3
def reverse3(nums):
  return nums[::-1]

# max_end3
def max_end3(nums):
  max_value = max(nums[0], nums[-1])
  return [max_value] * 3

# sum2
def sum2(nums):
  return sum(nums[:2])

# middle_way
def middle_way(a, b):
    return [a[1], b[1]]