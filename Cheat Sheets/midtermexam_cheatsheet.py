# -*- coding: utf-8 -*-
"""MidtermExam_9676.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12JciARGxigVJCE-nKAQVAeFYN551DHqB
"""

# Question 1

weekday = int(input("What is weekday of today? (1 - 7) "))
hour = int(input("What is the current time? "))
isAM_PM = input("Is it AM or PM? ")

if 1 <= weekday <= 5:
    if isAM_PM == "AM" and 9 <= hour <= 11:
      print("I am working! ")
    elif isAM_PM == "PM" and (hour == 12 or 1 <= hour <= 6):
      print("I am working! ")
    else:
      print("I am off my job now ")
else:
    # WEEKEND
    if isAM_PM == "AM" and hour == 11:
      print("I am on vacation! ")
    elif isAM_PM == "PM" and (1 <= hour <= 12):
      print("I am on vacation! ")
    else:
      print("I am sleeping! ")

# Question 2

input_salary = 0
salary_list = []
managerCt = 0

while input_salary != -1:
  input_salary = int(input("What is your salary? "))
  if input_salary != -1:
    salary_list.append(input_salary)
  if input_salary >= 90000:
    managerCt += 1
# END OF WHILE LOOP

salary_list.sort()

print("Total number of salaries:", len(salary_list))
print("Minimum Salary:", salary_list[0])
print("2nd Minimum Salary:", salary_list[1])
print("Maximum Salary:", salary_list[-1])
print("2nd Maximum Salary:", salary_list[-2])
print("Average Salary:", sum(salary_list) / len(salary_list))
print("Number of Managers:", managerCt)

# QUESTION 3

def sum67(numbers):
  total = 0
  insideFlag = False
  for number in numbers:
    if number != 6 and number != 7 and insideFlag == False:
      total += number
    elif number == 6:
      insideFlag = True
    elif number == 7:
      if insideFlag == True:
        insideFlag = False
      else:
        total += 7
  return total

print(sum67([1, 2, 2]))
print(sum67([1, 2, 2, 6, 99, 99, 7]))
print(sum67([1, 1, 6, 7, 2]))
print(sum67([1, 6, 99, 99, 7, 3, 1, 6, 1, 7]))

# QUESTION 4

def canBalance(intArray):
  if len(intArray) == 1:
    return False

  for splitIndex in range(0, len(intArray)):
    # USE SLICING
    leftSum = sum(intArray[:splitIndex])
    rightSum = sum(intArray[splitIndex:])
    # print(leftSum, rightSum, splitIndex)
    if leftSum == rightSum:
      return True
  # END OF FOR LOOP
  return False

print(canBalance([1, 1, 1, 2, 1]))
print(canBalance([2, 1, 1, 2, 1]))
print(canBalance([10, 10]))

# QUESTION 5 BONUS

def canBalance(intArray):
  if len(intArray) == 1:
    return False

  for splitIndex in range(0, len(intArray)):
    # USE SLICING
    leftList = intArray[:splitIndex]
    leftListEven = []
    for number in leftList:
      if number % 2 == 0:
        leftListEven.append(number)
    leftSumEven = sum(leftListEven)
    leftSum = sum(intArray[:splitIndex])
    rightSum = sum(intArray[splitIndex:])
    # print(leftSum, rightSum, splitIndex)
    if leftSum == rightSum:
      return True
  # END OF FOR LOOP
  return False

print(canBalance([1, 1, 1, 2, 1]))
print(canBalance([2, 1, 1, 2, 1]))
print(canBalance([10, 10]))